package main

import (
	"strconv"

	"github.com/notnil/chess"
)

func GetPieceValue(square chess.Square, piece chess.Piece, isEndGame bool) float64 {
	if piece.Type() == chess.NoPieceType {
		return 0.0
	}
	var pieceValue = 0.0
	if piece.Type() == chess.Pawn {
		pieceValue += 1.00
	} else if piece.Type() == chess.Rook {
		pieceValue += 5.00
	} else if piece.Type() == chess.Knight {
		pieceValue += 3.20
	} else if piece.Type() == chess.Bishop {
		pieceValue += 3.30
	} else if piece.Type() == chess.Queen {
		pieceValue += 9.00
	} else {
		pieceValue += 200.00
	}

	pieceValue += GetPositionValue(square, piece, isEndGame)

	if piece.Color() == chess.Black {
		return pieceValue * -1
	}
	return pieceValue
}

func GetPositionValue(square chess.Square, piece chess.Piece, isEndGame bool) float64 {
	var board []float64
	if piece.Type() == chess.Pawn {
		board = []float64{
			0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
			0.05, 0.10, 0.10, -0.20, -0.20, 0.10, 0.10, 0.05,
			0.05, -0.05, -0.10, 0.00, 0.00, -0.10, -0.05, 0.05,
			0.00, 0.00, 0.00, 0.20, 0.20, 0.00, 0.00, 0.00,
			0.05, 0.05, 0.10, 0.25, 0.25, 0.10, 0.05, 0.05,
			0.10, 0.10, 0.20, 0.30, 0.30, 0.20, 0.10, 0.10,
			0.50, 0.50, 0.50, 0.50, 0.50, 0.50, 0.50, 0.50,
			0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00}
	} else if piece.Type() == chess.Rook {
		board = []float64{
			0.00, 0.00, 0.00, 0.05, 0.05, 0.00, 0.00, 0.00,
			-0.05, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, -0.05,
			-0.05, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, -0.05,
			-0.05, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, -0.05,
			-0.05, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, -0.05,
			-0.05, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, -0.05,
			0.05, 0.10, 0.10, 0.10, 0.10, 0.10, 0.10, 0.05,
			0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00}
	} else if piece.Type() == chess.Knight {
		board = []float64{
			-0.50, -0.40, -0.30, -0.30, -0.30, -0.30, -0.40, -0.50,
			-0.40, -0.20, 0.00, 0.05, 0.05, 0.00, -0.20, -0.40,
			-0.30, 0.05, 0.10, 0.15, 0.15, 0.10, 0.05, -0.30,
			-0.30, 0.00, 0.15, 0.20, 0.20, 0.15, 0.00, -0.30,
			-0.30, 0.05, 0.15, 0.20, 0.20, 0.15, 0.05, -0.30,
			-0.30, 0.00, 0.10, 0.15, 0.15, 0.10, 0.00, -0.30,
			-0.40, -0.20, 0.00, 0.00, 0.00, 0.00, -0.20, -0.40,
			-0.50, -0.40, -0.30, -0.30, -0.30, -0.30, -0.40, -0.50}
	} else if piece.Type() == chess.Bishop {
		board = []float64{
			-0.20, -0.10, -0.10, -0.10, -0.10, -0.10, -0.10, -0.20,
			-0.10, 0.05, 0.00, 0.00, 0.00, 0.00, 0.05, -0.10,
			-0.10, 0.10, 0.10, 0.10, 0.10, 0.10, 0.10, -0.10,
			-0.10, 0.00, 0.10, 0.10, 0.10, 0.10, 0.00, -0.10,
			-0.10, 0.05, 0.05, 0.10, 0.10, 0.05, 0.05, -0.10,
			-0.10, 0.00, 0.05, 0.10, 0.10, 0.05, 0.00, -0.10,
			-0.10, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, -0.10,
			-0.20, -0.10, -0.10, -0.10, -0.10, -0.10, -0.10, -0.20}
	} else if piece.Type() == chess.Queen {
		board = []float64{
			-0.20, -0.10, -0.10, -0.05, -0.05, -0.10, -0.10, -0.20,
			-0.10, 0.00, 0.05, 0.00, 0.00, 0.00, 0.00, -0.10,
			-0.10, 0.05, 0.05, 0.05, 0.05, 0.05, 0.00, -0.10,
			0.00, 0.00, 0.05, 0.05, 0.05, 0.05, 0.00, -0.05,
			-0.05, 0.00, 0.05, 0.05, 0.05, 0.05, 0.00, -0.05,
			-0.10, 0.00, 0.05, 0.05, 0.05, 0.05, 0.00, -0.10,
			-0.10, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, -0.10,
			-0.20, -0.10, -0.10, -0.05, -0.05, -0.10, -0.10, -0.20}
	} else if piece.Type() == chess.King && !isEndGame {
		board = []float64{
			0.20, 0.30, 0.10, 0.00, 0.00, 0.10, 0.30, 0.20,
			0.20, 0.20, 0.00, 0.00, 0.00, 0.00, 0.20, 0.20,
			-0.10, -0.20, -0.20, -0.20, -0.20, -0.20, -0.20, -0.10,
			-0.20, -0.30, -0.30, -0.40, -0.40, -0.30, -0.30, -0.20,
			-0.30, -0.40, -0.40, -0.50, -0.50, -0.40, -0.40, -0.30,
			-0.30, -0.40, -0.40, -0.50, -0.50, -0.40, -0.40, -0.30,
			-0.30, -0.40, -0.40, -0.50, -0.50, -0.40, -0.40, -0.30,
			-0.30, -0.40, -0.40, -0.50, -0.50, -0.40, -0.40, -0.30}
	} else {
		// king and endgame
		board = []float64{
			-0.50, -0.30, -0.30, -0.30, -0.30, -0.30, -0.30, -0.50,
			-0.30, -0.30, 0.00, 0.00, 0.00, 0.00, -0.30, -0.30,
			-0.30, -0.10, 0.20, 0.30, 0.30, 0.20, -0.10, -0.30,
			-0.30, -0.10, 0.30, 0.40, 0.40, 0.30, -0.10, -0.30,
			-0.30, -0.10, 0.30, 0.40, 0.40, 0.30, -0.10, -0.30,
			-0.30, -0.10, 0.20, 0.30, 0.30, 0.20, -0.10, -0.30,
			-0.30, -0.20, -0.10, 0.00, 0.00, -0.10, -0.20, -0.30,
			-0.50, -0.40, -0.30, -0.20, -0.20, -0.30, -0.40, -0.50}
	}

	var line = int(square.String()[0]-'a') + 1
	var file, _ = strconv.Atoi(square.String()[1:])
	return board[line*file-1]
}
